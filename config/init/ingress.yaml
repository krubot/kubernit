apiVersion: v1
kind: List
items:
  - apiVersion: extensions/v1beta1
    kind: PodSecurityPolicy
    metadata:
      name: nginx-ingress
      labels:
        app: nginx-ingress
    spec:
      allowedCapabilities:
        - NET_BIND_SERVICE
      privileged: false
      allowPrivilegeEscalation: true
      volumes:
        - 'configMap'
        - 'secret'
      hostNetwork: true
      hostIPC: false
      hostPID: false
      runAsUser:
        rule: 'MustRunAsNonRoot'
      supplementalGroups:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535
      fsGroup:
        rule: 'MustRunAs'
        ranges:
          - min: 1
            max: 65535
      readOnlyRootFilesystem: false
      seLinux:
        rule: 'RunAsAny'
      hostPorts:
        - max: 65535
          min: 1
  - apiVersion: v1
    kind: ConfigMap
    metadata:
      labels:
        app: nginx-ingress
        component: "controller"
      name: nginx-ingress-controller
    data:
      enable-vts-status: "true"
  - apiVersion: v1
    kind: ServiceAccount
    metadata:
      labels:
        app: nginx-ingress
      name: ingress
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRole
    metadata:
      labels:
        app: nginx-ingress
      name: nginx-ingress
    rules:
      - apiGroups:
          - ""
        resources:
          - configmaps
          - endpoints
          - nodes
          - pods
          - secrets
        verbs:
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - nodes
        verbs:
          - get
      - apiGroups:
          - ""
        resources:
          - services
        verbs:
          - get
          - list
          - update
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
      - apiGroups:
          - extensions
        resources:
          - ingresses/status
        verbs:
          - update
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: ClusterRoleBinding
    metadata:
      labels:
        app: nginx-ingress
      name: nginx-ingress
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: ClusterRole
      name: nginx-ingress
    subjects:
      - kind: ServiceAccount
        name: ingress
        namespace: kube-system
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: Role
    metadata:
      labels:
        app: nginx-ingress
      name: nginx-ingress
    rules:
      - apiGroups:
          - ""
        resources:
          - namespaces
        verbs:
          - get
      - apiGroups:
          - ""
        resources:
          - configmaps
          - pods
          - secrets
          - endpoints
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - ""
        resources:
          - services
        verbs:
          - get
          - list
          - update
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses
        verbs:
          - get
          - list
          - watch
      - apiGroups:
          - extensions
        resources:
          - ingresses/status
        verbs:
          - update
      - apiGroups:
          - ""
        resources:
          - configmaps
        resourceNames:
          - ingress-controller-leader-nginx
        verbs:
          - get
          - update
      - apiGroups:
          - ""
        resources:
          - configmaps
        verbs:
          - create
      - apiGroups:
          - ""
        resources:
          - endpoints
        verbs:
          - create
          - get
          - update
      - apiGroups:
          - ""
        resources:
          - events
        verbs:
          - create
          - patch
      - apiGroups:
          - extensions
        resources:
          - podsecuritypolicies
        verbs:
          - use
        resourceNames:
          - nginx-ingress
  - apiVersion: rbac.authorization.k8s.io/v1beta1
    kind: RoleBinding
    metadata:
      labels:
        app: nginx-ingress
      name: nginx-ingress
    roleRef:
      apiGroup: rbac.authorization.k8s.io
      kind: Role
      name: nginx-ingress
    subjects:
      - kind: ServiceAccount
        name: ingress
        namespace: kube-system
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: nginx-ingress
        component: controller
      name: nginx-ingress-controller-metrics
    spec:
      clusterIP: ""
      ports:
        - name: metrics
          port: 9913
          targetPort: metrics
      selector:
        app: nginx-ingress
        component: controller
      type: "ClusterIP"
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: nginx-ingress
        component: controller
      name: nginx-ingress-controller
    spec:
      clusterIP: ""
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: http
        - name: https
          port: 443
          protocol: TCP
          targetPort: https
      selector:
        app: nginx-ingress
        component: "controller"
        release: RELEASE-NAME
      type: "NodePort"
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: nginx-ingress
        component: controller
      name: nginx-ingress-controller-stats
    spec:
      clusterIP: ""
      ports:
        - name: stats
          port: 18080
          targetPort: stats
      selector:
        app: nginx-ingress
        component: controller
      type: "ClusterIP"
  - apiVersion: v1
    kind: Service
    metadata:
      labels:
        app: nginx-ingress
        component: default-backend
      name: nginx-ingress-default-backend
    spec:
      clusterIP: ""
      ports:
        - name: http
          port: 80
          protocol: TCP
          targetPort: http
      selector:
        app: nginx-ingress
        component: default-backend
      type: "ClusterIP"
  - apiVersion: extensions/v1beta1
    kind: DaemonSet
    metadata:
      labels:
        app: nginx-ingress
        component: controller
      name: nginx-ingress-controller
    spec:
      revisionHistoryLimit: 10
      updateStrategy: {}
      minReadySeconds: 0
      template:
        metadata:
          annotations:
          labels:
            app: nginx-ingress
            component: controller
        spec:
          dnsPolicy: ClusterFirst
          containers:
            - name: nginx-ingress-controller
              image: "quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.22.0"
              imagePullPolicy: "IfNotPresent"
              args:
                - /nginx-ingress-controller
                - --default-backend-service=kube-system/nginx-ingress-default-backend
                - --election-id=ingress-controller-leader
                - --ingress-class=nginx
                - --configmap=default/nginx-ingress-controller
              env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: POD_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              ports:
                - name: http
                  containerPort: 80
                  protocol: TCP
                - name: https
                  containerPort: 443
                  protocol: TCP
                - name: stats
                  containerPort: 18080
                  protocol: TCP
                - name: metrics
                  containerPort: 10254
                  protocol: TCP
              readinessProbe:
                httpGet:
                  path: /healthz
                  port: 10254
                  scheme: HTTP
                initialDelaySeconds: 10
                periodSeconds: 10
                timeoutSeconds: 1
                successThreshold: 1
                failureThreshold: 3
              resources: {}
          hostNetwork: true
          serviceAccountName: ingress
          terminationGracePeriodSeconds: 60
  - apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      labels:
        app: nginx-ingress
        component: default-backend
      name: nginx-ingress-default-backend
    spec:
      replicas: 1
      revisionHistoryLimit: 10
      template:
        metadata:
          labels:
            app: nginx-ingress
            component: default-backend
        spec:
          containers:
            - name: nginx-ingress-default-backend
              image: "k8s.gcr.io/defaultbackend:1.3"
              imagePullPolicy: "IfNotPresent"
              args:
              livenessProbe:
                httpGet:
                  path: /healthz
                  port: 8080
                  scheme: HTTP
                initialDelaySeconds: 30
                timeoutSeconds: 5
              ports:
                - name: http
                  containerPort: 8080
                  protocol: TCP
              resources: {}
          terminationGracePeriodSeconds: 60
